ecars <- read_csv("data/Electric_Vehicle_Population_Data.csv") %>%
clean_names() %>%
rename(vin_1_10=vin)
ecars <- read_csv("data/Electric_Vehicle_Population_Data.csv") %>%
clean_names() %>%
rename(vin_1_10="vin")
ecars <- read_csv("data/Electric_Vehicle_Population_Data.csv") %>%
clean_names() %>%
rename(vin=vin_1_10)
glimpse(ecars)
ecars <- read_csv("data/Electric_Vehicle_Population_Data.csv") %>%
clean_names() %>%
rename(vin=vin_1_10, eligibility=clean_alternative_fuel_vehicle_cafv_eligibility, census_tract=x2020_census_tract)
glimpse(ecars)
ecars <- read_csv("data/Electric_Vehicle_Population_Data.csv") %>%
clean_names() %>%
rename(vin=vin_1_10, eligibility=clean_alternative_fuel_vehicle_cafv_eligibility, census_tract=x2020_census_tract)
View(ecars)
ecars <- read_csv("data/Electric_Vehicle_Population_Data.csv") %>%
clean_names() %>%
rename(vin=vin_1_10, eligibility=clean_alternative_fuel_vehicle_cafv_eligibility, census_tract=x2020_census_tract) %>%
mutate(year=as.factor(year))
ecars <- read_csv("data/Electric_Vehicle_Population_Data.csv") %>%
clean_names() %>%
rename(vin=vin_1_10, eligibility=clean_alternative_fuel_vehicle_cafv_eligibility, census_tract=x2020_census_tract) %>%
mutate(year=as_factor(year))
glimpse(ecars)
ecars %>% count(county)
ecars %>% count(state)
ecars %>%
group_by(state) %>%
summarise(n=n())
ecars %>% n_distinct(state)
glimpse(ecars)
ecars %>%
ggplot(aes(make))+
geom_bar()
ecars %>%
ggplot(aes(make))+
geom_bar()+
coord_flip()
ecars %>%
filter(electric_vehicle_type=="Battery Electric Vehicle (BEV)") %>%
ggplot(aes(make))+
geom_bar()+
coord_flip()
ecars %>%
filter(electric_vehicle_type=="Battery Electric Vehicle (BEV)" & make!="TESLA") %>%
ggplot(aes(make))+
geom_bar()+
coord_flip()
ecars %>%
filter(eligibility=="Clean Alternative Fuel Vehicle Eligible") %>%
ggplot(aes(make))+
geom_bar()+
coord_flip()
ecars %>%
ggplot(aes(eligibility))+
geom_bar()+
coord_flip()
install.packages(c("curl", "data.table", "jsonlite", "processx", "ps", "terra", "tinytex", "xfun"))
msleep
library(tidyverse)
library(janitor)
library(shiny)
library(shinydashboard)
library(shinythemes)
msleep
names(msleep)
msleep %>%
ggplot(aes(x=vore, y=sleep_rem))+
geom_boxplot()
msleep %>%
ggplot(aes(x=vore, y=sleep_rem))+
geom_boxplot(na.rm=T)
names(msleep)
msleep %>%
ggplot(aes(x=vore, y=sleep_cycle))+
geom_boxplot(na.rm=T)
msleep %>%
ggplot(aes(x=vore, y=awake))+
geom_boxplot(na.rm=T)
msleep %>%
ggplot(aes(x=vore, y=sleep_total))+
geom_boxplot(na.rm=T)
msleep %>%
ggplot(aes(x=vore, y=sleep_total, fill=vore))+
geom_boxplot(na.rm=T)
msleep %>%
ggplot(aes(x=vore, y=sleep_total, fill=vore))+
geom_boxplot(na.rm=T, alpha=0.8)
msleep %>%
ggplot(aes(x=vore, y=sleep_total, fill=vore))+
geom_boxplot(na.rm=T, alpha=0.6)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
ggplot(aes_string(x=vore, y=input$y, fill="vore"))+
geom_boxplot(na.rm=T, alpha=0.6)+
theme_light(base_size=14)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
ggplot(aes_string(x="vore", y=input$y, fill="vore"))+
geom_boxplot(na.rm=T, alpha=0.6)+
theme_light(base_size=14)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
ggplot(aes_string(x="vore", y=input$y, fill="vore"))+
geom_boxplot(na.rm=T, alpha=0.6)+
theme_light(base_size=14)+
labs(x="Type of Vore", y=NULL, fill="Vore")
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
msleep %>%
ggplot(aes_string(x="vore", y=input$y, fill="vore"))+
geom_boxplot(na.rm=T, alpha=0.6)+
theme_light(base_size=14)+
labs(x="Type of Vore", y=NULL, fill="Vore")
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
msleep %>%
ggplot(aes_string(x="vore", y=input$y, fill="vore"))+
geom_boxplot(na.rm=T, alpha=0.6)+
theme_light(base_size=14)+
labs(x="Type of Vore", y=NULL, fill="Vore")
})
}
shinyApp(ui, server)
names(msleep)
ui <- fluidPage(
selectInput("y",
"Select Sleep Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
msleep %>%
ggplot(aes_string(x="vore", y=input$y, fill="vore"))+
geom_boxplot(na.rm=T, alpha=0.6)+
theme_light(base_size=14)+
labs(x="Type of Vore", y=NULL, fill="Vore")
})
}
shinyApp(ui, server)
?msleep
names(msleep)
msleep %>%
ggplot(aes(x=vore, y=sleep_total, fill=vore))+
geom_boxplot(na.rm=T, alpha=0.6)+
theme_light(base_size=14)+
msleep %>%
ggplot(aes(x=vore, y=sleep_total, fill=vore))+
geom_boxplot(na.rm=T, alpha=0.6)+
theme_light(base_size=14)
names(msleep)
names(msleep)
msleep %>%
ggplot(aes(x=brainwt, y=bodywt, color=order))+
geom_point()
msleep %>%
ggplot(aes(y=brainwt, x=bodywt, color=order))+
geom_point()
msleep %>%
ggplot(aes(y=brainwt, x=bodywt, color=order))+
geom_point()+
scale_x_log10()+
scale_y_log10()
msleep %>%
ggplot(aes(y=brainwt, x=bodywt))+
geom_point()
msleep <- msleep
View(msleep)
ui <- fluidPage(selectInput("x",
"Select Order",
choices = unique(msleep$order),
selected="Afrosoricida"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(order==input$x) %>%
ggplot(aes(x="bodywt", y="brainwt"))+
geom_point()
})
}
shinyApp(ui, server)
View(msleep)
msleep %>%
filter(order=="Afrosoricida") %>%
ggplot(aes(y=brainwt, x=bodywt))+
geom_point()
msleep %>%
filter(order=="Afrosoricida")
msleep %>%
filter(order=="Carnivora") %>%
ggplot(aes(y=brainwt, x=bodywt))+
geom_point()
msleep %>%
filter(order=="Carnivora") %>%
ggplot(aes(bodywt))+
geom_density()
msleep %>%
filter(order=="Carnivora") %>%
ggplot(aes(bodywt))+
geom_histogram()
msleep %>%
filter(order=="Carnivora") %>%
ggplot(aes(bodywt))+
geom_histogram()
msleep %>%
filter(order=="Carnivora") %>%
ggplot(aes(bodywt))+
geom_histogram(bins=20, fill="blue", alpha=0.6)+
msleep %>%
filter(order=="Carnivora") %>%
ggplot(aes(bodywt))+
geom_histogram(bins=20, fill="blue", alpha=0.6)
msleep %>%
filter(order=="Carnivora") %>%
ggplot(aes(bodywt))+
geom_histogram(bins=20, fill="gray", alpha=0.6)
msleep %>%
filter(order=="Carnivora") %>%
ggplot(aes(bodywt))+
geom_histogram(bins=20, fill="steelblue", color="black" alpha=0.6)
msleep %>%
filter(order=="Carnivora") %>%
ggplot(aes(bodywt))+
geom_histogram(bins=20, fill="steelblue", color="black", alpha=0.6)
ui <- fluidPage(selectInput("x",
"Select Order",
choices = unique(msleep$order),
selected="Afrosoricida"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(order==input$x) %>%
ggplot(aes(bodywt))+
geom_histogram(bins=20, fill="steelblue", color="black", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(selectInput("x",
"Select Vore Type",
choices = unique(msleep$vore),
selected="carni"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(order==input$x) %>%
ggplot(aes(bodywt))+
geom_histogram(bins=20, fill="steelblue", color="black", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(selectInput("x",
"Select Vore Type",
choices = unique(msleep$vore),
selected="carni"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x) %>%
ggplot(aes(bodywt))+
geom_histogram(bins=20, fill="steelblue", color="black", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(selectInput("x",
"Select Vore Type",
choices = unique(msleep$vore),
selected="carni"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x) %>%
ggplot(aes(bodywt))+
geom_density(fill="steelblue", color="black", alpha=0.6)
})
}
shinyApp(ui, server)
msleep %>%
group_by(vore) %>%
summarize(mean_bodywt=mean(bodywt, na.rm=T))
msleep %>%
ggplot(aes(bodywt))+
geom_histogram(bins=20, fill="steelblue", color="black", alpha=0.6)
msleep %>%
ggplot(aes(sleep_total))+
geom_histogram(bins=20, fill="steelblue", color="black", alpha=0.6)
ui <- fluidPage(selectInput("x",
"Select Vore Type",
choices = unique(msleep$vore),
selected="carni"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x) %>%
ggplot(aes(sleep_total))+
geom_histogram(fill="steelblue", color="black", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(selectInput("x",
"Select Vore Type",
choices = unique(msleep$vore),
selected="carni"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x) %>%
ggplot(aes(sleep_total))+
geom_density(fill="steelblue", color="black", alpha=0.6)
})
}
shinyApp(ui, server)
msleep %>%
ggplot(aes(x=sleep_total, fill=vore))+
geom_density(alpha=0.6)+
theme_light(base_size=14)
msleep %>%
ggplot(aes(x=sleep_total))+
geom_density(alpha=0.6)+
theme_light(base_size=14)
msleep %>%
ggplot(aes(x=sleep_total, fill=vore))+
geom_density(alpha=0.6)+
theme_light(base_size=14)
ui <- fluidPage(selectInput("x",
"Select Vore Type",
choices = unique(msleep$vore),
selected="carni"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x) %>%
ggplot(aes(sleep_total))+
geom_density(fill="steelblue", color="black", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(selectInput("x",
"Select Vore Type",
choices = unique(msleep$vore),
selected="carni"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x) %>%
ggplot(aes(sleep_total))+
geom_density(fill="steelblue", color="black", alpha=0.6)+
labs(x=NULL, y="Sleep Total")
})
}
shinyApp(ui, server)
ui <- fluidPage(selectInput("x",
"Select Vore Type",
choices = unique(msleep$vore),
selected="carni"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x) %>%
ggplot(aes(sleep_total))+
geom_density(fill="steelblue", color="black", alpha=0.6)+
labs(x="Sleep Total", y=NULL)
})
}
shinyApp(ui, server)
ui <- fluidPage(selectInput("x",
"Select Vore Type",
choices = unique(msleep$vore),
selected="carni"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x) %>%
ggplot(aes(sleep_total))+
geom_density(fill="steelblue", color="black", alpha=0.6)+
labs(x="Sleep Total", y=NULL)+
theme_light(base_size=14)
})
}
shinyApp(ui, server)
ui <- fluidPage(selectInput("x",
"Select Vore Type",
choices = unique(msleep$vore),
selected="carni"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x & vore!=NA) %>%
ggplot(aes(sleep_total))+
geom_density(fill="steelblue", color="black", alpha=0.6)+
labs(x="Sleep Total", y=NULL)+
theme_light(base_size=14)
})
}
shinyApp(ui, server)
ui <- fluidPage(selectInput("x",
"Select Vore Type",
choices = unique(msleep$vore),
selected="carni"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x | vore!=NA) %>%
ggplot(aes(sleep_total))+
geom_density(fill="steelblue", color="black", alpha=0.6)+
labs(x="Sleep Total", y=NULL)+
theme_light(base_size=14)
})
}
shinyApp(ui, server)
msleep <- msleep %>%
filter(!is.na(vore))
ui <- fluidPage(selectInput("x",
"Select Vore Type",
choices = unique(msleep$vore),
selected="carni"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x) %>%
ggplot(aes(sleep_total))+
geom_density(fill="steelblue", color="black", alpha=0.6)+
labs(x="Sleep Total", y=NULL)+
theme_light(base_size=14)
})
}
shinyApp(ui, server)
